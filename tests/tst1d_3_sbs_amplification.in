# ---------------------
# SIMULATION PARAMETERS
# ---------------------

# dim: Geometry of the simulation
#      1d3v = cartesian grid with 1d in space + 3d in velocity
#      2d3v = cartesian grid with 2d in space + 3d in velocity
#      3d3v = cartesian grid with 3d in space + 3d in velocity
#      2drz = cylindrical (r,z) grid with 3d3v particles
#
dim = 1d3v

# order of interpolation
#
interpolation_order = 2

# SIMULATION TIME
# res_time: temporal resolution (integer = number of timeâˆ’steps within one normalization period)
# sim_time: duration of the simulation in units of the normalization period 
#
res_time = 10
sim_time = 100.0

# SIMULATION BOX : for all space directions (use vector)
# res_space: spatial resolution (vector of integer = number of cells in one normalization wavelength )
# sim_length: length of the simulation in units of the normalization wavelength 
#
res_space  = 5
sim_length = 120.0


# ---------------
# PLASMA GEOMETRY
# ---------------

# plasma_geometry: string defining the plasma geometry
# ***_length: characteristic length for a given geometry
#
plasma_geometry = trap
vacuum_length   = 10.0
plasma_length   = 100.0
slope_length    = 5.0


# RANDOM seed 
# this is used to randomize the random number generator
random_seed = 0


# DEFINE ALL SPECIES
# species_type: ion, electron, positron, test ...
# initialization_type: regular, cold or (isotrop) Maxwell?~H~RJuettner distribution
# n_part_per_cell: number of particle?~H~Rper?~H~Rcell
# c_part_max: factor on the memory reserved for the total number of particles
# mass: particle mass in units of the electron mass
# charge: particle charge in units of e (?~H~Re is the electron charge)
# density: species density in units of the normalization density
# mean_velocity: mean velocity of the species (3D vector) in units of the light velocity
# temperature: temperature of the species in units of m_e c^2
# dynamics_type: species type of dynamics = norm or rrLL
# time_frozen: time during which the particles are frozen in units of the normalization time
# radiating: boolean, if true incoherent radiation are calculated using the Larmor formula 
#
species
	species_type = ion
	initialization_type = maxwell-juettner
	ionization_model = none
	n_part_per_cell = 10
	c_part_max = 1.0
	mass = 1836.0
	charge = 1.0
	density = 0.3e0
	mean_velocity = 0.0
	temperature = 2.0e-5
	dynamics_type = norm
	time_frozen = 100.0
	radiating = false
	bc_part_type = refl
end

species
	species_type = eon
	initialization_type = maxwell-juettner
	ionization_model = none
	n_part_per_cell = 10
	c_part_max = 1.0
	mass = 1.0
	charge = -1.0
	density = 0.3e0
	mean_velocity = 0.0
	temperature = 1.0e-3
	dynamics_type = norm
	time_frozen = 0.0
	radiating = false
	bc_part_type = refl
end

# ----------------
# LASER PROPERTIES
# ----------------
#
# for each laser define:
# a0: maximum amplitude of the laser electric field (in units of the normalization field)
# angle: angle (in degree) at which the laser enters the simulation box
# delta: polarization parameter, (0:y) (1:z) (0.707106781:circ)
# time_profile: string defining the time profile
# double_params: vector of real parameters used by the different time-profiles
#
laser
	a0=8.5e-2
	angle=0
	delta=1.0              
	time_profile = sin2
	double_params = 1.0 1000.0
end

laser
	a0=8.5e-3
	angle=180
	delta=1.0        
	time_profile = sin2
	double_params = 30.0 0.0 150.0
end

# ---------------------
# DIAGNOSTIC PARAMETERS
# ---------------------

# print_every (on screen text output) 
print_every = 100

# every for field dump
fieldDump_every = 125

# every for particle dump
particleDump_every = 2500

# DIAG ON SCALARS
# every = number of time-steps between each output
#
diagnostic scalar
	every = 125
end

diagnostic phase
# kind of projection: 1D) xPx xPy xPz xLor PxPy PxPz PyPz
# kind of projection: 2D) xPx xPy xPz xLor yPx yPy yPz yLor PxPy PxPz PyPz
	kind = xPx xPy xPz xLor

    species = eon

	every = 100

	pos_min = 0
	pos_max = 120
	pos_num = 2000
	
	mom_min = -0.3
	mom_max = 0.3
	mom_num = 200

	lor_min = 0.95
	lor_max = 1
	lor_num = 200
end

diagnostic phase
	kind = PxPy PxPz PyPz
    species = eon
	every = 100

	mom_min = -0.3 -0.3
	mom_max = 0.3 0.3
	mom_num = 200 200
end

# PROBEs 0D
# every = number of time-steps between each output
# pos   = position of the different probes
#
diagnostic probe
	every = 1
	pos = 30.0
end

diagnostic probe
	every = 1
	pos = 90.0
end

diagnostic probe
    every = 10
    pos = 0
    pos_first = 12
    number = 13
end

#dump_minutes = 0.1
dump_step = 1000
exit_after_dump = false
