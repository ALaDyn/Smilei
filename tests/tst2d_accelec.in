# SIMULATION PARAMETERS
# dim: Geometry of the simulation
#      1d3v = cartesian grid with 1d in space + 3d in velocity
#      2d3v = cartesian grid with 2d in space + 3d in velocity
#      3d3v = cartesian grid with 3d in space + 3d in velocity
#      2drz = cylindrical (r,z) grid with 3d3v particles
#

sim_units = wavelength
dim = 2d3v

# order of interpolation
interpolation_order = 2

# SIMULATION TIME
# res_time: temporal resolution (integer = number of time−steps within one normalization period)
# sim_time: duration of the simulation in units of the normalization period 
#
#res_time = 52
timestep = 0.0197352129
sim_time = 80

# SIMULATION BOX : for all space directions (use vector)
# res_space: spatial resolution (vector of integer = number of cells in one normalization wavelength )
# sim_length: length of the simulation in units of the normalization wavelength 
#
#res_space  = 51  4  
cell_length  = 0.019894367 0.5 #0.2387324  
sim_length = 6000.  30.  
#sim_length = 135  183.  
bc_em_type_long = silver-muller
bc_em_type_trans = silver-muller

number_of_procs = 2 2 

# PLASMA GEOMETRY
# plasma_geometry: string defining the plasma geometry
# ***_length: characteristic length for a given geometry
#

res_space_win_x = 864
t_move_win = 11.0
vx_win = 0.9997
clrw = 6

# RANDOM seed 
# this is used to randomize the random number generator
random_seed = 0

# DEFINE ALL SPECIES

# species_type: ion, electron, positron, test ...
# initialization_type: regular, cold or (isotrop) Maxwell−Juettner distribution# n_part_per_cell: number of particle−per−cell
# c_part_max: factor on the memory reserved for the total number of particles
# mass: particle mass in units of the electron mass
# charge: particle charge in units of e (−e is the electron charge)
# density: species density in units of the normalization density
# mean_velocity: mean velocity of the species (3D vector) in units of the light velocity
# temperature: temperature of the species in units of m_e c^2
# dynamics_type: species type of dynamics = norm or rrLL
# time_frozen: time during which the particles are frozen in units of the normalization time
# radiating: boolean, if true incoherent radiation are calculated using the Larmor formula 
#
species
	species_type = proton
	initialization_type = regular
	ionization_model = none
        species_geometry = trapezoidal
        vacuum_length   = 0.0  0.0 
        #dens_length_x: Length of the plateau - Length of left slope - Length of right slope
        dens_length_x = 6000 20  
        #dens_length_y: Length of the plateau - Length of left slope - Length of right slope
        dens_length_y = 2000 0 
	n_part_per_cell = 5 
	c_part_max = 1.0
	mass = 1836.0
	charge = 1.0
	density = 0.000494
	mean_velocity = 0.0 0.0 0.0
	temperature = 0.001
	dynamics_type = norm
	time_frozen = 100000.
	radiating = false
	bc_part_type_long  = supp
	bc_part_type_trans = supp
end

species 
	species_type = electron1
	initialization_type = regular
        species_geometry = trapezoidal
        vacuum_length   = 0.0  0.0 
        #dens_length_x: Length of the plateau - Length of left slope - Length of right slope
        dens_length_x = 2000 20 
        #dens_length_y: Length of the plateau - Length of left slope - Length of right slope
        dens_length_y = 2000 0 
	n_part_per_cell = 5
	c_part_max = 1.0
	mass = 1.0
	charge = -1.0
	density = 0.000494
	mean_velocity = 0.0 0.0 0.0
	temperature = 0.001
	dynamics_type = norm	
	time_frozen = 0.0
	radiating = false
	bc_part_type_long = supp
	bc_part_type_trans = stop
end

# ----------------
# LASER PROPERTIES
# ----------------
#
# for each laser define:
# a0: maximum amplitude of the laser electric field (in units of the normalization field)
# angle: angle (in degree) at which the laser enters the simulation box
# delta: polarization parameter, (0:y) (1:z) (0.707106781:circ)
# time_profile: string defining the time profile
# double_params: vector of real parameters used by the different time-profiles
#
laser
	a0=2.0
        boxSide = west
	angle=0
	delta=0.0              
	time_profile =  gaussian
        transv_profile = gaussian
	double_params = 1.0 0.0 0.0 # gaussian:FWHM in intensity, plateau length, delay (same unit as sim_length)
	#double_params = 50.0 0.0 # constant: Duration of the pulse, delay before pulse start.
        int_params = 3 # Cut-off of the longitudinal gaussian in number of sigma
        double_params_transv = 15. 5. # distance from axis, transverse FWHM in intensity (same unit as sim_length)
        int_params_transv= 2 # order of the hyper gaussian
end

# ---------------------
# DIAGNOSTIC PARAMETERS
# ---------------------

# print_every (on screen text output) 
print_every = 1

# every for field dump
fieldDump_every = 1000

# every for particle dump
particleDump_every = 10000000

# every for averagefield Dump
avgfieldDump_every = 10000000


# DIAG ON SCALARS
# every = number of time-steps between each output
#
diagnostic scalar
	every = 6000000
end

# PROB 0D
# every = number of time-steps between each output
# x     = position of the different probes
#
#diagnostic probe0d
#	every = 1
#	x = 0.0  6.0   12.0	
#	y = 2.5  2.5   2.5
#end


dump_step = 10000000
exit_after_dump = false

