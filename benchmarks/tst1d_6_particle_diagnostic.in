# ---------------------------------------------
# SIMULATION PARAMETERS FOR THE PIC-CODE SMILEI
# ---------------------------------------------

# sim_units: normalisation units for the input data
#            it is used only in the input data & log file
#            codes outputs are always in "normalised" units
#            wavelength = input data are in wavelength-related units
#            normalized = input data are put in code (relativistic) units
#
sim_units = wavelength
wavelength_SI = 1.e-6

# dim: Geometry of the simulation
#      1d3v = cartesian grid with 1d in space + 3d in velocity
#      2d3v = cartesian grid with 2d in space + 3d in velocity
#      3d3v = cartesian grid with 3d in space + 3d in velocity
#      2drz = cylindrical (r,z) grid with 3d3v particles
#
dim = 1d3v

# order of interpolation
#
interpolation_order = 2

# SIMULATION TIME 
# either use the resolution (res_time) or time-step (timestep)
#
# res_time  : temporal resolution 
# timestep : time step
# sim_time  : duration of the simulation 
#
timestep = 0.005
sim_time  = 0.5

# SIMULATION BOX : for all space directions (in 2D & 3D use vector of doubles)
# either use the resolution (res_space) or cell-length (cell_length)
#
# res_space   : spatial resolution 
# sim_length  : length of the simulation 
# cell_length : cell-length 
#
cell_length = 0.01
sim_length  = 1.

# ELECTROMAGNETIC BOUNDARY CONDITIONS
# bc_em_type_long/trans : boundary conditions used for EM fields 
#                         in the longitudinal or transverse directions
#                         periodic      = periodic BC (using MPI topology)
#                         silver-muller = injecting/absorbing
#
bc_em_type_long  = periodic


# RANDOM seed 
# this is used to randomize the random number generator
#
random_seed = 0

# DEFINE ALL SPECIES
#
# species_type: ion, electron, positron, test ...
# initPosition_type = regular
	initMomentum_type = maxwell-juettner distribution
# n_part_per_cell: number of particle−per−cell
# c_part_max: factor on the memory reserved for the total number of particles
# mass: particle mass in units of the electron mass
# charge: particle charge in units of e (−e is the electron charge)
# density: species density in units of the normalization density
# mean_velocity: mean velocity of the species (3D vector) in units of the light velocity
# temperature: temperature of the species in units of m_e c^2
# dynamics_type: species type of dynamics = norm or rrLL
# time_frozen: time during which the particles are frozen in units of the normalization time
# radiating: boolean, if true incoherent radiation are calculated using the Larmor formula 
#
species
	species_type = ion1
	species_geometry = constant
	vacuum_length   = 0.
	dens_length_x   = 1000. 1000. 1000.
	initPosition_type = random
	initMomentum_type = maxwell-juettner
	n_part_per_cell = 2000
	c_part_max = 1.0
	mass = 1836.0
	charge = 1.0
	density = 10.
	mean_velocity = 0. 0. 0.
	temperature = 0.00002
	dynamics_type = norm
	time_frozen = 0.0
	bc_part_type_west = none
	bc_part_type_east = none
end
species 
	species_type = electron1
	species_geometry = constant
	vacuum_length   = 0.
	dens_length_x   = 1000. 1000. 1000.
	initPosition_type = random
	initMomentum_type = maxwell-juettner
	n_part_per_cell= 2000
	c_part_max = 1.0
	mass = 1.0
	charge = -1.0
	density = 10.
	mean_velocity = 0.05 0. 0.
	temperature = 0.00002
	dynamics_type = norm
	time_frozen = 0.0
	bc_part_type_west = none
	bc_part_type_east = none
end


# ---------------------
# DIAGNOSTIC PARAMETERS
# ---------------------

# print_every (on screen text output) 
print_every = 10

# every for field dump
fieldDump_every    = 5
avgfieldDump_every = 5
ntime_step_avg     = 1


# DIAG ON SCALARS
# every = number of time-steps between each output
#
diagnostic scalar
	every = 1
end


# DIAGNOSTICS ON PARTICLES - project the particles on a N-D arbitrary grid
# ------------------------------------------------------------------------
# output = density, charge_density or current_density_[xyz]
#              => parameter that describes what quantity is obtained 
# every        => integer > 0 : number of time-steps between each output
# time_average => integer > 0 : number of time-steps to average
# species      => list of one or several species whose data will be used
# axis   = _type_ _min_ _max_ _nsteps_ [logscale] [edge_inclusive]
#              => _type_ can be one of the following:
#                  x, y, z, px, py, pz, p, gamma, ekin, vx, vy, vz, v or charge
#              => the data is discretized for _type_ between _min_ and
#                  _max_, in _nsteps_ bins
#              => the optional [logscale] sets the scale to logarithmic
#              => the optional [edge_inclusive] forces the particles
#                  outside (_min_,_max_) to be counted in the extrema bins
#   example : axis = x 0 1 30
#   example : axis = px -1 1 100 
# >>>> MANY AXES CAN BE ADDED IN A SINGLE DIAGNOSTIC <<<<

diagnostic particles
	output = density
	every = 4
	time_average = 2
	species = electron1
	axis = x    0    1.   100
	axis = vx  -0.1  0.1    100
end

diagnostic particles
	output = density
	every = 4
	time_average = 1
	species = ion1
	axis = x    0    1.   100
	axis = vx  -0.001  0.001  100
end

diagnostic particles
	output = px_density
	every = 4
	time_average = 2
	species = electron1
	axis = x    0    1.   100
	axis = vx  -0.1  0.1    100
end

diagnostic particles
	output = density
	every = 1
	time_average = 1
	species = electron1
	axis = ekin  0.0001  0.1 100 logscale edge_inclusive
end

