################################################################################
# Machine file for the Adastra machine at CINES
#
# Note:
#
# You'll want to compile smilei with the "gpu_amd" config flag enabled:
# $ make machine="adastra_gpu" config="amd_gpu" -j
#
# Each node has 4 MI250X accelerators. An MI250X is made of 2 GCDs which are to 
# be used as if it was an individual GPU.
# You'll want to associate one MPI proc per GCD (2 MPI/MI250X).
#
# To compile you may want these modules:
#
# module purge
# # Hardware, libfabric is not loaded by craype-network-ofi cines01 (while it is on lumi01)
# module load craype-network-ofi craype-x86-trento libfabric/1.15.0.0
# # Compiler
# module load PrgEnv-cray/8.3.3 cce/14.0.1
# # MPI
# module load cray-mpich/8.1.17
# # GPU
# module load craype-accel-amd-gfx90a
# module load rocm/4.5.2
# # Other libs
# module load cray-hdf5-parallel/1.12.1.5 cray-python/3.9.12.1
# # Introduce perftools-* in case the user needs it, note that this module is not advertised by "module av" !
# module load perftools-base/22.06.0
# module list
#
# Optionally, you may want to use a virtual python environment in which to 
# install the packages required by the Smilei validation script:
#
# python -m venv ~/.smilei_python_venv
# source ~/.smilei_python_venv/bin/activate
# python -m pip install --upgrade --retries 0 --timeout 5 pip
# pip3 install --retries 0 --timeout 5 numpy h5py matplotlib
#
#
################################################################################

################################################################################
# Compilers
################################################################################

SMILEICXX := $(CC)
SMILEICXX.DEPS := $(SMILEICXX)
# THRUSTCXX := hipcc
THRUSTCXX := $(SMILEICXX)

################################################################################
# Feature flags
################################################################################

ADASTRA_FEATURE_FLAGS := -std=c++14

################################################################################
# Warning flags
################################################################################

ADASTRA_WARNING_FLAGS := -Wextra -pedantic -fdiagnostics-show-option -fstrict-aliasing -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wdouble-promotion -Wformat=2 -Winit-self -Wmissing-include-dirs -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-promo -Wstrict-aliasing -Wsuggest-override -Wswitch-default -Wswitch-enum -Wtautological-compare -Wundef -Wunreachable-code
ADASTRA_WARNING_FLAGS += -Wno-unused-variable -Wno-unused-parameter -Wno-unknown-pragmas

################################################################################
# Optimization flags
################################################################################

# TODO(Etienne M): Thin LTO and mcmodel lead to an "unclosed quote" linker script error: https://reviews.llvm.org/D26795
# ADASTRA_OPTIMIZATION_LTO_FLAGS   := -flto=thin
# ADASTRA_OPTIMIZATION_OTHER_FLAGS := -mcmodel=large
# -march=native is not required, the PrgEnv will set the appropriate CPU arch flags
ADASTRA_OPTIMIZATION_FLAGS       := -O3 $(ADASTRA_OPTIMIZATION_LTO_FLAGS) $(ADASTRA_OPTIMIZATION_OTHER_FLAGS)
# More FP optimizations at the cost of non strict IEEE compliance
# ADASTRA_OPTIMIZATION_FLAGS       += -ffast-math 

################################################################################
# Debug flags
################################################################################

# To check for leaks, use this feature
# ADASTRA_DEBUG_SANITIZER_FLAGS := -fsanitize=address # -fsanitize=undefined
# -g and -ggdb have no know runtime overhead expect for program size
ADASTRA_DEBUG_FLAGS           := -g -ggdb $(ADASTRA_DEBUG_SANITIZER_FLAGS)

################################################################################
# Omp flags
################################################################################

ADASTRA_OMP_FLAGS := -fopenmp

################################################################################
# OMP GPU offloading support flags
################################################################################

ifneq (,$(call parse_config,gpu_amd))
    # Add mi100/250x amd gpu arch
	# xnack is a feature required to use the AMD unified memory (through 
	# HMM/HSA). xnack- disable it, xnack+ enabled it, and if not specified,
	# the compiler produces xnack agnostic code.
	# Details at: https://docs.olcf.ornl.gov/systems/crusher_quick_start_guide.html#migration-of-memory-by-allocator-and-xnack-mode
    ADASTRA_ACCELERATOR_GPU_TARGET_ARCH := amdgcn-amd-amdhsa
    ADASTRA_ACCELERATOR_GPU_TARGET      := gfx908
	# ADASTRA_ACCELERATOR_GPU_TARGET      := gfx90a:xnack-
    # ADASTRA_ACCELERATOR_GPU_TARGET      := gfx90a
	# ADASTRA_ACCELERATOR_GPU_TARGET      := gfx90a:xnack-

    # TODO(Etienne M): This should be disabled right ? Unfortunately its a mess to undefine from this machine file
    # ADASTRA_OPTIMIZATION_FLAGS += -U_VECTO

    # When using OMP
    ADASTRA_ACCELERATOR_GPU_OMP_DEFINE_FLAGS := -DSMILEI_ACCELERATOR_GPU_OMP=1
    ADASTRA_ACCELERATOR_GPU_OMP_FLAGS        := -fopenmp-targets=$(ADASTRA_ACCELERATOR_GPU_TARGET_ARCH) -Xopenmp-target=$(ADASTRA_ACCELERATOR_GPU_TARGET_ARCH) -march=$(ADASTRA_ACCELERATOR_GPU_TARGET)

    # When using hip/cuda to build kernels
    # When you ask CCE to drive the hip compilation
    # NOTE: the -x hip flag MUST come before the .cu files !
    ADASTRA_ACCELERATOR_GPU_KERNEL_FLAGS := -x hip --offload-arch=$(ADASTRA_ACCELERATOR_GPU_TARGET)
    # When you use hipcc directly
    # ADASTRA_ACCELERATOR_GPU_KERNEL_FLAGS := --offload-arch=$(ADASTRA_ACCELERATOR_GPU_TARGET)
    # ADASTRA_ACCELERATOR_GPU_KERNEL_FLAGS += --save-temps # Cuda/HIP kernel info. To use with the AMD compiler (the Cray compiler don't produce interesting details, only the Clang LLVM IR)
endif

################################################################################
# Includes
################################################################################

ADASTRA_INCLUDES := -I$(CRAY_MPICH_DIR)/include -I$(ROCM_PATH)/hiprand/include -I$(ROCM_PATH)/rocrand/include

################################################################################
# Libs
################################################################################

# May help resolve some linker issue
# -foffload=-lm

# Small perf increase but causes ABI problems when cray-pat is used
# ADASTRA_OMP_STATIC := -static-openmp
# ADASTRA_MPI_gfx908_LIB := $(PE_MPICH_GTL_DIR_amd_gfx908) $(PE_MPICH_GTL_LIBS_amd_gfx908)
# ADASTRA_MPI_gfx90a_LIB := $(PE_MPICH_GTL_DIR_amd_gfx90a) $(PE_MPICH_GTL_LIBS_amd_gfx90a)
# ADASTRA_MPI            := -L$(CRAY_MPICH_DIR)/lib -lmpi $(ADASTRA_MPI_gfx908_LIB) $(ADASTRA_MPI_gfx90a_LIB)

# ADASTRA_HIP := -L$(ROCM_PATH)/lib -lamdhip64

ADASTRA_LIBS := $(ADASTRA_MPI) $(ADASTRA_HIP) $(ADASTRA_OMP_STATIC)

################################################################################
#
################################################################################

# Inherit of all the typical *.cpp compilation options
# ACCELERATOR_GPU_KERNEL_FLAGS := $(CXXFLAGS) # This command is soo weird, it doesn't work as expected
ACCELERATOR_GPU_KERNEL_FLAGS += $(shell $(PYTHONCONFIG) --includes) $(DIRS:%=-I%)
ACCELERATOR_GPU_KERNEL_FLAGS += $(ADASTRA_FEATURE_FLAGS)
ACCELERATOR_GPU_KERNEL_FLAGS += $(ADASTRA_WARNING_FLAGS)
ACCELERATOR_GPU_KERNEL_FLAGS += $(ADASTRA_OPTIMIZATION_FLAGS)
ACCELERATOR_GPU_KERNEL_FLAGS += $(ADASTRA_DEBUG_FLAGS)
ACCELERATOR_GPU_KERNEL_FLAGS += $(ADASTRA_OMP_FLAGS)
ACCELERATOR_GPU_KERNEL_FLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_DEFINE_FLAGS)
# ACCELERATOR_GPU_KERNEL_FLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_FLAGS) # Disabled due to unsupported option '-fopenmp-targets=' for language mode 'HIP'
ACCELERATOR_GPU_KERNEL_FLAGS += $(ADASTRA_ACCELERATOR_GPU_KERNEL_FLAGS)
ACCELERATOR_GPU_KERNEL_FLAGS += $(ADASTRA_INCLUDES)

CXXFLAGS += $(ADASTRA_FEATURE_FLAGS)
CXXFLAGS += $(ADASTRA_WARNING_FLAGS)
CXXFLAGS += $(ADASTRA_OPTIMIZATION_FLAGS)
CXXFLAGS += $(ADASTRA_DEBUG_FLAGS)
CXXFLAGS += $(ADASTRA_OMP_FLAGS)
CXXFLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_DEFINE_FLAGS)
CXXFLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_FLAGS) # if gpu_amd is set, adds the appropriate flags, else nothing is added
CXXFLAGS += $(ADASTRA_INCLUDES)

LDFLAGS += $(ADASTRA_DEBUG_FLAGS) $(ADASTRA_OMP_FLAGS)
LDFLAGS += $(ADASTRA_LIBS)
# We need to link with the appropriate "First-Party Tool" (as OpenMP calls them)
LDFLAGS += $(ADASTRA_ACCELERATOR_GPU_OMP_FLAGS)
# Without Ofast/O3 at link time, the kernel'll not be optimized ~~. 
# Some kind of LTO is used, or maybe the kernel optimization is only done at link time.
# -v to dump omp kernel info (register alloc/spill etc.)
LDFLAGS += $(ADASTRA_OPTIMIZATION_FLAGS) -v
# LDFLAGS += --save-temps # OpenMP device kernel info. To use with the Cray compiler
