#
# Machine file for Jean Zay at IDRIS
# __________________________________________________________
#
# Documentation:
# http://www.idris.fr/jean-zay
#

SMILEICXX.DEPS = nvcc
THRUSTCXX = nvcc

ACCELERATOR_GPU_FLAGS += -w
# IDRIS config for curand
ACCELERATOR_GPU_FLAGS += -tp=zen3 -ta=tesla:cc80 -std=c++14  -lcurand -Mcudalib=curand
# ACCELERATOR_GPU_FLAGS += --expt-relaxed-constexpr

ACCELERATOR_GPU_KERNEL_FLAGS += -O3 --std c++14 $(DIRS:%=-I%)
ACCELERATOR_GPU_KERNEL_FLAGS += --expt-relaxed-constexpr
ACCELERATOR_GPU_KERNEL_FLAGS += $(shell $(PYTHONCONFIG) --includes)
ACCELERATOR_GPU_KERNEL_FLAGS += -arch=sm_80
ACCELERATOR_GPU_FLAGS        += -Minfo=accel # what is offloaded/copied
# ACCELERATOR_GPU_FLAGS        += -Minfo=all   # very verbose output

# OpenACC support
ACCELERATOR_GPU_FLAGS += -DSMILEI_OPENACC_MODE
ACCELERATOR_GPU_KERNEL_FLAGS += -DSMILEI_OPENACC_MODE

# To turn on the OpenMP support, uncomment these 3 lines and comment the line just above defining 'SMILEI_OPENACC_MODE'
# ACCELERATOR_GPU_FLAGS        += -mp=gpu -DSMILEI_ACCELERATOR_GPU_OMP
# ACCELERATOR_GPU_KERNEL_FLAGS +=         -DSMILEI_ACCELERATOR_GPU_OMP # Can't we pass the -mp=gpu to nvcc when compiling a .cu file ?
# LDFLAGS                      += -mp=gpu

LDFLAGS += -ta=tesla:cc80 -std=c++14 -Mcudalib=curand -lcudart -lcurand -lacccuda -L/gpfslocalsys/cuda/11.2/lib64/
CXXFLAGS +=  -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1
